// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamCameServiceClient is the client API for StreamCameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamCameServiceClient interface {
	Streaming(ctx context.Context, opts ...grpc.CallOption) (StreamCameService_StreamingClient, error)
	View(ctx context.Context, in *VeiwReq, opts ...grpc.CallOption) (StreamCameService_ViewClient, error)
	Move(ctx context.Context, in *MoveReq, opts ...grpc.CallOption) (*MoveRsp, error)
	MoveRegister(ctx context.Context, in *MoveRegisterReq, opts ...grpc.CallOption) (StreamCameService_MoveRegisterClient, error)
}

type streamCameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamCameServiceClient(cc grpc.ClientConnInterface) StreamCameServiceClient {
	return &streamCameServiceClient{cc}
}

func (c *streamCameServiceClient) Streaming(ctx context.Context, opts ...grpc.CallOption) (StreamCameService_StreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamCameService_ServiceDesc.Streams[0], "/StreamCameService/streaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamCameServiceStreamingClient{stream}
	return x, nil
}

type StreamCameService_StreamingClient interface {
	Send(*CameReq) error
	CloseAndRecv() (*CameRsp, error)
	grpc.ClientStream
}

type streamCameServiceStreamingClient struct {
	grpc.ClientStream
}

func (x *streamCameServiceStreamingClient) Send(m *CameReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamCameServiceStreamingClient) CloseAndRecv() (*CameRsp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CameRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamCameServiceClient) View(ctx context.Context, in *VeiwReq, opts ...grpc.CallOption) (StreamCameService_ViewClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamCameService_ServiceDesc.Streams[1], "/StreamCameService/view", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamCameServiceViewClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamCameService_ViewClient interface {
	Recv() (*VeiwRsp, error)
	grpc.ClientStream
}

type streamCameServiceViewClient struct {
	grpc.ClientStream
}

func (x *streamCameServiceViewClient) Recv() (*VeiwRsp, error) {
	m := new(VeiwRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamCameServiceClient) Move(ctx context.Context, in *MoveReq, opts ...grpc.CallOption) (*MoveRsp, error) {
	out := new(MoveRsp)
	err := c.cc.Invoke(ctx, "/StreamCameService/move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamCameServiceClient) MoveRegister(ctx context.Context, in *MoveRegisterReq, opts ...grpc.CallOption) (StreamCameService_MoveRegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamCameService_ServiceDesc.Streams[2], "/StreamCameService/moveRegister", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamCameServiceMoveRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamCameService_MoveRegisterClient interface {
	Recv() (*MoveRsp, error)
	grpc.ClientStream
}

type streamCameServiceMoveRegisterClient struct {
	grpc.ClientStream
}

func (x *streamCameServiceMoveRegisterClient) Recv() (*MoveRsp, error) {
	m := new(MoveRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamCameServiceServer is the server API for StreamCameService service.
// All implementations must embed UnimplementedStreamCameServiceServer
// for forward compatibility
type StreamCameServiceServer interface {
	Streaming(StreamCameService_StreamingServer) error
	View(*VeiwReq, StreamCameService_ViewServer) error
	Move(context.Context, *MoveReq) (*MoveRsp, error)
	MoveRegister(*MoveRegisterReq, StreamCameService_MoveRegisterServer) error
	mustEmbedUnimplementedStreamCameServiceServer()
}

// UnimplementedStreamCameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamCameServiceServer struct {
}

func (UnimplementedStreamCameServiceServer) Streaming(StreamCameService_StreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method Streaming not implemented")
}
func (UnimplementedStreamCameServiceServer) View(*VeiwReq, StreamCameService_ViewServer) error {
	return status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedStreamCameServiceServer) Move(context.Context, *MoveReq) (*MoveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedStreamCameServiceServer) MoveRegister(*MoveRegisterReq, StreamCameService_MoveRegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method MoveRegister not implemented")
}
func (UnimplementedStreamCameServiceServer) mustEmbedUnimplementedStreamCameServiceServer() {}

// UnsafeStreamCameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamCameServiceServer will
// result in compilation errors.
type UnsafeStreamCameServiceServer interface {
	mustEmbedUnimplementedStreamCameServiceServer()
}

func RegisterStreamCameServiceServer(s grpc.ServiceRegistrar, srv StreamCameServiceServer) {
	s.RegisterService(&StreamCameService_ServiceDesc, srv)
}

func _StreamCameService_Streaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamCameServiceServer).Streaming(&streamCameServiceStreamingServer{stream})
}

type StreamCameService_StreamingServer interface {
	SendAndClose(*CameRsp) error
	Recv() (*CameReq, error)
	grpc.ServerStream
}

type streamCameServiceStreamingServer struct {
	grpc.ServerStream
}

func (x *streamCameServiceStreamingServer) SendAndClose(m *CameRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamCameServiceStreamingServer) Recv() (*CameReq, error) {
	m := new(CameReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamCameService_View_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VeiwReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamCameServiceServer).View(m, &streamCameServiceViewServer{stream})
}

type StreamCameService_ViewServer interface {
	Send(*VeiwRsp) error
	grpc.ServerStream
}

type streamCameServiceViewServer struct {
	grpc.ServerStream
}

func (x *streamCameServiceViewServer) Send(m *VeiwRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamCameService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamCameServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StreamCameService/move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamCameServiceServer).Move(ctx, req.(*MoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamCameService_MoveRegister_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MoveRegisterReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamCameServiceServer).MoveRegister(m, &streamCameServiceMoveRegisterServer{stream})
}

type StreamCameService_MoveRegisterServer interface {
	Send(*MoveRsp) error
	grpc.ServerStream
}

type streamCameServiceMoveRegisterServer struct {
	grpc.ServerStream
}

func (x *streamCameServiceMoveRegisterServer) Send(m *MoveRsp) error {
	return x.ServerStream.SendMsg(m)
}

// StreamCameService_ServiceDesc is the grpc.ServiceDesc for StreamCameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamCameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamCameService",
	HandlerType: (*StreamCameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "move",
			Handler:    _StreamCameService_Move_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streaming",
			Handler:       _StreamCameService_Streaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "view",
			Handler:       _StreamCameService_View_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "moveRegister",
			Handler:       _StreamCameService_MoveRegister_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream-camera.proto",
}
